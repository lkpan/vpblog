(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{283:function(t,a,s){"use strict";s.r(a);var r=s(14),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript进阶第二天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript进阶第二天"}},[t._v("#")]),t._v(" JavaScript进阶第二天")]),t._v(" "),a("h2",{attrs:{id:"每个构造函数都有一个原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每个构造函数都有一个原型对象"}},[t._v("#")]),t._v(" 每个构造函数都有一个原型对象")]),t._v(" "),a("p",[t._v("原型可以共享一个方法，把不变的方法写到prototype对象上")]),t._v(" "),a("h2",{attrs:{id:"构造函数this指向问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数this指向问题"}},[t._v("#")]),t._v(" 构造函数this指向问题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("let that\nfunction Star(uname) {\nthat = this\nconsole.log(this)\nthis.uname = uname\n    }\n    //结果为（that === ldh）\n    //Star {uname: '刘德华'}  里面this结果\n")])])]),a("p",[t._v("原型实例对象里面的this指向的也是其调用者")]),t._v(" "),a("h2",{attrs:{id:"原型对象-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象-prototype"}},[t._v("#")]),t._v(" 原型对象  .prototype")]),t._v(" "),a("p",[t._v("是个对象，可以挂载函数，对象实例化不会多次创建原型上函数，节约内存")]),t._v(" "),a("h2",{attrs:{id:"constructor作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor作用"}},[t._v("#")]),t._v(" constructor作用")]),t._v(" "),a("p",[t._v("因为使用直接= 的形式将会使其找不到原先的构造函数，需要construtor重新指向原来的构造函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("实例对象.constructor指向构造函数Star\nWoman.prototype.constructor = Woman\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nStar.prototype = {\n// 从新指回创造这个原型对象的 构造函数\n      constructor: Star,\n      sing: function () {\n        console.log('唱歌')\n      },\n      dance: function () {\n        console.log('跳舞')\n      },\n    }\n")])])]),a("h2",{attrs:{id:"对象模型-proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象模型-proto"}},[t._v("#")]),t._v(" 对象模型__proto__")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("__proto__与[[prototype]]一个意思\nfunction Star (uname) {\n      this.name = uname\n    }\n    let sb = new Star('sb')\n    console.log(sb.__proto__ === Star.prototype);//true\n    //Star：构造函数，sb实例对象，sb.__proto__ 以及Star.prototype都指向Star的原型对象\n")])])]),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sequenceDiagram")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("participant")]),t._v(" A as 构造函数\nA"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("->>")]),t._v("C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" new一个再 .prototype\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("participant")]),t._v(" B as 实例对象\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("participant")]),t._v(" C as 对象原型\nA"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("->>")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" new一个就可以产生实例对象\nB"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("->>")]),t._v("C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 实例对象.__proto__\nB"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("->>")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 实例对象.__proto__.constructor\nC"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("->>")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 原型即 prototype.constructor\n")])])]),a("h2",{attrs:{id:"原型继承-公共属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型继承-公共属性"}},[t._v("#")]),t._v(" 原型继承 公共属性")]),t._v(" "),a("p",[t._v("需要公共属性一致，但不是同一个对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const Person = {\n      eays : 2,\n      hand : 1\n\n    }\n\n    function Woman() {\n\n    }\n    Woman.prototype = Person\n    Woman.prototype.constructor = Woman\n    Woman.prototype.baby = 'sb'\n    console.log(Woman.prototype);\n    \n    function Man () {\n\n    }\n    Man.prototype = Person\n    Man.prototype.constructor = Man\n    console.log(Man.prototype);\n    \n    //结果Man也加上了baby\n    {eays: 2, hand: 1, constructor: ƒ, baby: 'sb'}\n")])])]),a("h4",{attrs:{id:"改进方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改进方法"}},[t._v("#")]),t._v(" 改进方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//使用构造函数来创建对象，可以获得相同的属性值对象，但不是同一个对象，只需改成\nfunction Person ()  {\n      this.eays = 2\n      this.hand = 1\n\n    }\n//应用\nMan.prototype = new Person\n")])])]),a("h2",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("p",[t._v("原型对象，实例对象的__proto__都可以指向其上一层的构造函数的__proto__，例如实例对象的__proto__可以找到他的构造函数，而构造函数的原型对象的__proto__指向上一级Object的prototype")]),t._v(" "),a("h4",{attrs:{id:"对象都有对象原型-proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象都有对象原型-proto"}},[t._v("#")]),t._v(" 对象都有对象原型__proto__")]),t._v(" "),a("h3",{attrs:{id:"原型链查找规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链查找规则"}},[t._v("#")]),t._v(" 原型链查找规则：")]),t._v(" "),a("p",[t._v("先查找自身有没有，如果没有就查找他的原型对象，还是没有再往上查找object的原型对象，还是没有就为null")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("instanceof 检测构造函数是否在这条原型链上\n    console.log(ldh instanceof Person)\n    console.log(ldh instanceof Object)\n    console.log(ldh instanceof Array)\n    console.log([1, 2, 3] instanceof Array)\n    console.log(Array instanceof Object)\n")])])]),a("h2",{attrs:{id:"案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),a("p",[t._v("箭头函数的妙用，此处必须使用箭头函数，使用fuction的话this指向的是"),a("i",[t._v("，使用箭头函数则指向我所需要的第一个this指向的标签")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.modalBox.querySelector('i').addEventListener('click',  () => {\n//这个this指向我创建的标签\n        this.close() //这个指向<i>\n      })\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);