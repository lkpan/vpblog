(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{282:function(t,a,n){"use strict";n.r(a);var s=n(14),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[t._v("#")]),t._v(" 浅拷贝")]),t._v(" "),a("h4",{attrs:{id:"直接复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接复制"}},[t._v("#")]),t._v(" 直接复制")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const obj = {\n      uname: 'pink',\n      age: 18,\n      family : {\n          baby:'sb'\n      }\n    }\n    const o = obj\n    console.log(o)\n    o.age = 20\n    导致obj的值被修改\n    \n    obj.family.baby = 'dasb'\n    const a = {...obj}\n    Object.assign(b, obj)\n    这两种拷贝在family这种情况下也会被修改,浅拷贝拷贝的只是family地址，也就是只拷贝了第一层\n")])])]),a("h2",{attrs:{id:"深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[t._v("#")]),t._v(" 深拷贝")]),t._v(" "),a("h3",{attrs:{id:"使用递归深拷贝-递归就是自己调用自己"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用递归深拷贝-递归就是自己调用自己"}},[t._v("#")]),t._v(" 使用递归深拷贝  递归就是自己调用自己")]),t._v(" "),a("p",[t._v("深拷贝拷贝出来的对象不影响原对象，需要用到递归，将要拷贝对象进行遍历，如果是非数组对象的直接进行拷贝，如果是数组用再递归一遍，然后对对象再执行同样的操作，要先执行数组的操作，因为"),a("code",[t._v("Array instanceof Object => true")])]),t._v(" "),a("h3",{attrs:{id:"利用lodash库深拷贝-也成为递归拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用lodash库深拷贝-也成为递归拷贝"}},[t._v("#")]),t._v(" 利用lodash库深拷贝（也成为递归拷贝）")]),t._v(" "),a("p",[a("code",[t._v("let o = _.cloneDeep(obj)")])]),t._v(" "),a("h3",{attrs:{id:"利用json方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用json方法"}},[t._v("#")]),t._v(" 利用json方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let aa = JSON.parse(JSON.stringify(obj)) \n//parse将字符串转为对象，stringfy将对象转为字符串\n")])])]),a("h2",{attrs:{id:"异常检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常检查"}},[t._v("#")]),t._v(" 异常检查")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//throw 抛出异常\nfunction sb(x,y) {\n            if(!x| !y) {\n                throw new Error( '没有传递参数')\n            }\n            return x + y\n        }\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//try catch\nfunction fn() {\n\n      try {\n        // 可能预估有问题的代码写到这里\n        const p = document.querySelector('.p')\n        p.style.color = 'red'\n      } catch (err) {\n        console.log(err.message)\n        // 中断\n        // return\n        throw new Error('你是不是把选择器写错了')\n      } finally {\n        alert('执行')\n      }\n\n      console.log(111)\n    }\n    fn()\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("debugger\n")])])]),a("h2",{attrs:{id:"this指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指向"}},[t._v("#")]),t._v(" this指向")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 普通函数：  谁调用我，this就指向谁\n    console.log(this)  // window\n    function fn() {\n      console.log(this)  // window    \n    }\n    window.fn()\n    window.setTimeout(function () {\n      console.log(this) // window \n    }, 1000)\n    document.querySelector('button').addEventListener('click', function () {\n      console.log(this)  // 指向 button\n    })\n    const obj = {\n      sayHi: function () {\n        console.log(this)  // 指向 obj\n      }\n    }\n    obj.sayHi()\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("箭头函数：\n不适用于构造函数，原型函数，字面量对象的函数，dom事件函数，适用于使用上层函数的地方\n")])])]),a("h2",{attrs:{id:"改变this指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变this指向"}},[t._v("#")]),t._v(" 改变this指向")]),t._v(" "),a("h4",{attrs:{id:"call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[t._v("#")]),t._v(" call")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("call(需要指向的this，参数，参数....)\n")])])]),a("h4",{attrs:{id:"apply-携带数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply-携带数组"}},[t._v("#")]),t._v(" apply  携带数组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("apply(需要指向的this,[参数，参数...])\n返回值:本身就是在调用函数，所以返回值就是函数的返回值\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const obj = {\n      age: 18\n    }\n    function fn(x, y) {\n      console.log(this) // {age: 18}\n      console.log(x + y)\n    }\n    // 1. 调用函数                                                         \n    // 2. 改变this指向 \n    //  fn.apply(this指向谁, 数组参数)\n    fn.apply(obj, [1, 2])\n")])])]),a("h4",{attrs:{id:"bind-不会调用函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind-不会调用函数"}},[t._v("#")]),t._v(" bind  不会调用函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. bind 不会调用函数 \n// 2. 能改变this指向\n// 3. 返回值是个函数，  但是这个函数里面的this是更改过的obj\nconst fun = fn.bind(obj)\n// console.log(fun) \n    fun()\n\n    // 需求，有一个按钮，点击里面就禁用，2秒钟之后开启\n    document.querySelector('button').addEventListener('click', function () {\n      // 禁用按钮\n      this.disabled = true\n      window.setTimeout(function () {\n        // 在这个普通函数里面，我们要this由原来的window 改为 btn\n        this.disabled = false\n      }.bind(this), 2000)   // 这里的this 和 btn 一样\n    })\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);